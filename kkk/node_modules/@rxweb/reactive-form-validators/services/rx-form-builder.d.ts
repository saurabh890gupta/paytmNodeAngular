import { FormGroup } from "@angular/forms";
import { Type } from "../util";
import { BaseFormBuilder } from './base-form-builder';
import { FormBuilderConfiguration, DynamicFormConfiguration } from "../models";
import { RxFormGroup } from './rx-form-group';
import { AppFormGroup } from '../models/interface/i-form-group';
import { DynamicFormBuildConfig } from '../models/config/dynamic-form-build-config';
export declare class RxFormBuilder extends BaseFormBuilder {
    private nestedProp;
    private conditionalObjectProps;
    private conditionalValidationInstance;
    private builderConfigurationConditionalObjectProps;
    private formGroupPropOtherValidator;
    private currentFormGroupPropOtherValidator;
    private isNested;
    private isGroupCalled;
    private isNestedBinding;
    constructor();
    private getInstanceContainer;
    private setValue;
    private extractExpressions;
    private addAsyncValidation;
    private addFormControl;
    private additionalValidation;
    private getEntity;
    private getObjectPropertyInstance;
    private checkObjectPropAdditionalValidation;
    private getObject;
    group(groupObject: {
        [key: string]: any;
    }, validatorConfig?: FormBuilderConfiguration): FormGroup;
    private applyAllPropValidator;
    private dynamicValidationPropCheck;
    private createValidatorFormGroup;
    private getValidatorConfig;
    private getProps;
    dynamicForm(fields: any[], formConfiguration?: DynamicFormConfiguration): DynamicFormBuildConfig;
    formGroup<T>(model: Type<T> | {
        [key: string]: any;
    }, entityObject?: {
        [key: string]: any;
    } | FormBuilderConfiguration, formBuilderConfiguration?: FormBuilderConfiguration): RxFormGroup | FormGroup | AppFormGroup<T>;
}
